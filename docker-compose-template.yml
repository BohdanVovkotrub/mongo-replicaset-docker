services:
  first-init:
    image: ${DOCKERHUB_IMAGE_MONGO}
    container_name: first-init
    command: |
      bash -c "
        chmod +x -R /container_scripts/;
        bash /container_scripts/_first-init.sh;
      "
    environment:
      TZ: ${TZ}
    volumes:
      - keyfiles:/data/keyfiles:rw
      - container_scripts:/container_scripts:rw
      - firstinit_data_db:/data/db:rw
      - firstinit_data_configdb:/data/configdb:rw
    networks:
      - ${DOCKER_NETWORK_NAME}
    restart: "no"

  mongo1:
    image: ${DOCKERHUB_IMAGE_MONGO}
    container_name: mongo1
    command: ["bash", "/container_scripts/_mongo1.sh"]
    ports:
      - "${PORT_MONGO1}:${PORT_MONGO1}"
    volumes:
      - keyfiles:/data/keyfiles:ro
      - container_scripts:/container_scripts:ro
      - mongo1_data_db:/data/db:rw
      - mongo1_data_configdb:/data/configdb:rw
    networks:
      - ${DOCKER_NETWORK_NAME}
    environment:
      TZ: ${TZ}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      REPLICA_ID: ${REPLICA_ID}
      PORT_MONGO1: ${PORT_MONGO1} 
    healthcheck:
      test: >
        /bin/bash -c '
          bash /container_scripts/_mongo1-healthcheck.sh;
        '
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      - first-init
    restart: unless-stopped

  mongo2:
    image: ${DOCKERHUB_IMAGE_MONGO}
    container_name: mongo2
    command: ["bash", "/container_scripts/_mongo2.sh"]
    ports:
      - "${PORT_MONGO2}:${PORT_MONGO2}"
    volumes:
      - keyfiles:/data/keyfiles:ro
      - container_scripts:/container_scripts:ro
      - mongo2_data_db:/data/db:rw
      - mongo2_data_configdb:/data/configdb:rw
    networks:
      - ${DOCKER_NETWORK_NAME}
    environment:
      TZ: ${TZ}
      REPLICA_ID: ${REPLICA_ID}
      PORT_MONGO1: ${PORT_MONGO1}
      PORT_MONGO2: ${PORT_MONGO2}
      TIMEOUT_INIT_REPLICA: ${TIMEOUT_INIT_REPLICA}
    restart: unless-stopped
    depends_on:
      - mongo1

  mongo3:
    image: ${DOCKERHUB_IMAGE_MONGO}
    container_name: mongo3
    command: ["bash", "/container_scripts/_mongo3.sh"]
    ports:
      - "${PORT_MONGO3}:${PORT_MONGO3}"
    volumes:
      - keyfiles:/data/keyfiles:ro
      - container_scripts:/container_scripts:ro
      - mongo3_data_db:/data/db:rw
      - mongo3_data_configdb:/data/configdb:rw
    networks:
      - ${DOCKER_NETWORK_NAME}
    environment:
      TZ: ${TZ}
      REPLICA_ID: ${REPLICA_ID}
      PORT_MONGO1: ${PORT_MONGO1}
      PORT_MONGO3: ${PORT_MONGO3}
      TIMEOUT_INIT_REPLICA: ${TIMEOUT_INIT_REPLICA}
    restart: unless-stopped
    depends_on:
      - mongo1

  mongo-init-replica:
    image: ${DOCKERHUB_IMAGE_MONGO}
    container_name: mongo-init-replica
    command: ["bash", "/container_scripts/_mongo-init-replica.sh"]
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    environment:
      TZ: ${TZ}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      REPLICA_ID: ${REPLICA_ID}
      PORT_MONGO1: ${PORT_MONGO1}
      PORT_MONGO2: ${PORT_MONGO2}
      PORT_MONGO3: ${PORT_MONGO3}
      RS_PUBLIC_HOST1: ${RS_PUBLIC_HOST1}
      RS_PUBLIC_HOST2: ${RS_PUBLIC_HOST2}
      RS_PUBLIC_HOST3: ${RS_PUBLIC_HOST3}
      TIMEOUT_INIT_REPLICA: ${TIMEOUT_INIT_REPLICA}
    volumes:
      - container_scripts:/container_scripts:ro
      - mongoinitrs_data_db:/data/db:rw
      - mongoinitrs_data_configdb:/data/configdb:rw
    networks:
      - ${DOCKER_NETWORK_NAME}
    restart: "no"
    
  mongo-express:
    container_name: mongo-express
    image: ${DOCKERHUB_IMAGE_MONGO_EXPRESS}
    ports:
      - 8081:8081
    networks:
      - ${DOCKER_NETWORK_NAME}
    volumes:
      - container_scripts:/container_scripts:ro
    environment:
      TZ: ${TZ}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      REPLICA_ID: ${REPLICA_ID}
      PORT_MONGO1: ${PORT_MONGO1}
      PORT_MONGO2: ${PORT_MONGO2}
      PORT_MONGO3: ${PORT_MONGO3}
      TIMEOUT_INIT_REPLICA: ${TIMEOUT_INIT_REPLICA}
      ME_CONFIG_BASICAUTH: ${ME_CONFIG_BASICAUTH}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo1:${PORT_MONGO1},mongo2:${PORT_MONGO2},mongo3:${PORT_MONGO3}/admin?replicaSet=${REPLICA_ID}
    depends_on:
      mongo-init-replica:
        condition: service_completed_successfully


volumes:
  firstinit_data_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/firstinit/db
  firstinit_data_configdb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/firstinit/configdb
  
  mongoinitrs_data_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongoinitrs/db
  mongoinitrs_data_configdb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongoinitrs/configdb

  mongo1_data_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo1/db
  mongo1_data_configdb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo1/configdb


  mongo2_data_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo2/db
  mongo2_data_configdb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo2/configdb

  mongo3_data_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo3/db
  mongo3_data_configdb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/mongo3/configdb

  keyfiles:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/keyfiles

  container_scripts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/container_scripts
